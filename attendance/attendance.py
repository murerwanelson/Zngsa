# -*- coding: utf-8 -*-
"""attendance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJQddoTrDoondDso81s-bhYRS_pP9cpu

# Attendance Analysis

This notebook processes attendance data from a CSV file, cleans the data, and checks attendance status for each individual.

## Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from google.colab import files
from datetime import datetime, timedelta
import io

"""## Upload the CSV File
This code allows you to upload a CSV file containing attendance data.

"""

uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded['oct (2).csv']))

df.head(20)

"""## Clean the Data
Remove unnecessary columns and extract date and time.

"""

columns_to_drop = ['Department', 'No.', 'Location ID', 'ID Number', 'VerifyCode', 'CardNo']
df = df.drop(columns=columns_to_drop)

df['Date'] = pd.to_datetime(df['Date/Time']).dt.date
df['Time'] = pd.to_datetime(df['Date/Time']).dt.time

df = df.drop(columns=['Date/Time'])
df.head(10)

"""## Group by Name and Date
We group the data by 'Name' and 'Date' to get the first (min) and last (max) time entries for each person.

"""

time_in_out = df.groupby(['Name', 'Date'])['Time'].agg(['min', 'max'])
time_in_out = time_in_out.rename(columns={'min': 'Time In', 'max': 'Time Out'})
time_in_out = time_in_out.reset_index()
time_in_out.head(30)

"""## Check Attendance
Define a function to check attendance for each person and store the results in a DataFrame.

"""

# Get unique dates from the original data
unique_dates = df['Date'].unique()

# Generate full attendance list using only the unique dates from the original data
all_attendance = []
for name in unique_names:
    for date in unique_dates:  # Use the unique dates instead of generating a full date range
        all_attendance.append({'Name': name, 'Date': date})

all_attendance_df = pd.DataFrame(all_attendance)

# Merge with time_in_out to fill attendance status
attendance_df = pd.merge(all_attendance_df, time_in_out, on=['Name', 'Date'], how='left')

# Mark attendance as 'Absent' by default and update for 'Present' if records exist
attendance_df['Attendance'] = 'Absent'

# Update attendance for existing records
for index, row in time_in_out.iterrows():
    attendance_df.loc[(attendance_df['Name'] == row['Name']) & (attendance_df['Date'] == row['Date']), 'Attendance'] = 'Present'
    attendance_df.loc[(attendance_df['Name'] == row['Name']) & (attendance_df['Date'] == row['Date']), 'Time In'] = row['Time In']
    attendance_df.loc[(attendance_df['Name'] == row['Name']) & (attendance_df['Date'] == row['Date']), 'Time Out'] = row['Time Out']

attendance_df.head(30)