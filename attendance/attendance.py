# -*- coding: utf-8 -*-
"""Attendance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9g50u9pGjQ9utOllNMPtyMnURcfe8Z1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from google.colab import files
import io
from datetime import datetime, timedelta

from google.colab import files
uploaded = files.upload()

print(uploaded.keys())

import io
df = pd.read_csv(io.BytesIO(uploaded['today.csv']))

df.head(10)

columns_to_drop = ['Department', 'No.', 'Location ID', 'ID Number', 'VerifyCode', 'CardNo' ]
df = df.drop(columns=columns_to_drop)

df.head(10)

# 'Date/Time' is the column name containing the combined date and time
df['Date'] = pd.to_datetime(df['Date/Time']).dt.date
df['Time'] = pd.to_datetime(df['Date/Time']).dt.time

df.head(10)

Date_Time = ['Date/Time']

df = df.drop(columns=Date_Time)

df.head(10)

df.head(30)

# Group by 'Name' and 'Date' and get the min and max time
time_in_out = df.groupby(['Name', 'Date'])['Time'].agg(['min', 'max'])

# Rename the columns for clarity
time_in_out = time_in_out.rename(columns={'min': 'Time In', 'max': 'Time Out'})

# Reset the index to make 'Name' and 'Date' regular columns
time_in_out = time_in_out.reset_index()

time_in_out.head(30)

# ... (Your existing code for uploading and processing the DataFrame) ...

def check_attendance(df, name):
    """Checks attendance for a given person based on the DataFrame."""
    person_df = df[df['Name'] == name]
    unique_dates = sorted(person_df['Date'].unique())
    for day in unique_dates:
        if len(person_df[person_df['Date'] == day]) > 0:
            yield day, 'Present'
        else:
            yield day, 'Absent'


# Create a list of all unique names and dates within the DataFrame
unique_names = df['Name'].unique()
min_date = df['Date'].min()
max_date = df['Date'].max()
date_range = pd.date_range(start=min_date, end=max_date)

# Create an empty DataFrame with all names and dates for a complete attendance record
all_attendance = []
for name in unique_names:
    for date in date_range:
        all_attendance.append({'Name': name, 'Date': date.date()})

all_attendance_df = pd.DataFrame(all_attendance)

# Merge with the time_in_out DataFrame to get the existing attendance status
attendance_df = pd.merge(all_attendance_df, time_in_out, on=['Name', 'Date'], how='left')

# Populate the attendance for all entries with 'Absent' initially
attendance_df['Attendance'] = 'Absent'

# Create a dictionary to store the attendance status for each person and date
attendance_dict = {}

# Update with existing records
for index, row in time_in_out.iterrows():
    attendance_df.loc[(attendance_df['Name'] == row['Name']) & (attendance_df['Date'] == row['Date']), 'Attendance'] = 'Present'
    attendance_df.loc[(attendance_df['Name'] == row['Name']) & (attendance_df['Date'] == row['Date']), 'Time In'] = row['Time In']
    attendance_df.loc[(attendance_df['Name'] == row['Name']) & (attendance_df['Date'] == row['Date']), 'Time Out'] = row['Time Out']

# Print the updated DataFrame with the 'Attendance' column
attendance_df.head(30)

